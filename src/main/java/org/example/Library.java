/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.function.Consumer;
import java.util.logging.Logger;

import com.google.protobuf.ByteString;

import io.github.rdfc.Processor;
import io.github.rdfc.IReader;
import io.github.rdfc.IWriter;

public class Library extends Processor<Library.Args> {

    public Library(Args arguments, Logger logger) {
        super(arguments, logger);
    }

    public boolean someLibraryMethod() {
        return true;
    }

    public void init(Consumer<Void> callback) {
        this.logger.info("Done initing");
        callback.accept(null);
    }

    public void transform(Consumer<Void> callback) {
        this.arguments.reader.buffers().on(st -> st.ifPresentOrElse(msg -> {
            System.out.println("Got string " + msg.toStringUtf8());
        }, () -> {
            this.logger.info("Done transforming");
            callback.accept(null);
        }));
    }

    public void produce(Consumer<Void> callback) {
        System.out.println("Producing");
        this.arguments.writer.msg(ByteString.copyFromUtf8("Hallo " + this.arguments.name));
        this.arguments.writer.close();

        this.logger.info("Done producing");
        callback.accept(null);
    }

    public static class Args {
        public String name;
        public IReader reader;
        public IWriter writer;
    }
}
